name: Build and Publish curl_android

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        mkdir -p artifacts
        mkdir -p combined_libs

    # 下载并处理curl-android
    - name: Download curl-android artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        repo: vvb2060/curl-android
        workflow: <curl-android-workflow-name>.yml  # 替换实际workflow文件名
        name: library.zip
        path: artifacts/curl

    - name: Process curl-android
      run: |
        unzip artifacts/curl/library.zip -d artifacts/curl
        
        # 查找aar文件并提取版本号
        AAR_PATH=$(find artifacts/curl -name "*lto*.aar" -print -quit)
        echo "Found AAR: $AAR_PATH"
        VERSION=$(basename "$AAR_PATH" | sed -n 's/curl-\(.*\)-lto.*/\1/p')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # 解压aar
        unzip "$AAR_PATH" -d combined_libs/curl

    # 下载并处理BoringSSL_Android
    - name: Download BoringSSL artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        repo: vvb2060/BoringSSL_Android
        workflow: <boringssl-workflow-name>.yml  # 替换实际workflow文件名
        name: library.zip
        path: artifacts/boringssl

    - name: Process BoringSSL
      run: |
        unzip artifacts/boringssl/library.zip -d artifacts/boringssl
        
        # 查找aar文件
        BORING_AAR=$(find artifacts/boringssl -name "*lto*.aar" -print -quit)
        echo "Found BoringSSL AAR: $BORING_AAR"
        
        # 解压aar
        unzip "$BORING_AAR" -d combined_libs/boringssl

    # 生成CMakeLists.txt
    - name: Generate CMakeLists
      run: |
        cat << EOF > CMakeLists.txt
        cmake_minimum_required(VERSION 3.27)

        project(curl_android)

        add_library(curl_android INTERFACE)
        add_library(curl::curl_static ALIAS curl_android)

        function(add_imported_library lib_name lib_path)
            add_library(\${lib_name} STATIC IMPORTED)
            set_target_properties(\${lib_name} PROPERTIES IMPORTED_LOCATION \${lib_path})
        endfunction()

        set(LIBS curl nghttp2 nghttp3 ngtcp2 ngtcp2_crypto crypto ssl)

        foreach (lib \${LIBS})
            add_imported_library(\${lib} \${CMAKE_CURRENT_SOURCE_DIR}/combined_libs/jni/\${CMAKE_ANDROID_ARCH_ABI}/lib\${lib}_static.a)
            target_include_directories(curl_android INTERFACE \${CMAKE_CURRENT_SOURCE_DIR}/combined_libs/include/\${lib})
        endforeach ()

        target_link_libraries(curl_android INTERFACE
                curl
                nghttp2
                nghttp3
                ngtcp2
                ngtcp2_crypto
                crypto
                ssl
                z)
        EOF

    # 上传产物
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: curl_android_package
        path: |
          CMakeLists.txt
          combined_libs/

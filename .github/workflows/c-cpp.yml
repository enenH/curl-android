name: Combine AARs and Generate CMake

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y unzip jq

      # --- Download curl-android artifact ---
      - name: Get latest curl-android run ID
        id: curl_run
        run: |
          echo "run_id=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \
            https://api.github.com/repos/vvb2060/curl-android/actions/runs \
            | jq '.workflow_runs[] | select(.conclusion==\"success\") | .id' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Get curl-android artifact ID
        id: curl_artifact
        run: |
          echo "artifact_id=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \
            https://api.github.com/repos/vvb2060/curl-android/actions/runs/${{ steps.curl_run.outputs.run_id }}/artifacts \
            | jq '.artifacts[] | select(.name==\"library\") | .id')" >> $GITHUB_OUTPUT

      - name: Download curl-android artifact
        run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -o curl.zip \
            https://api.github.com/repos/vvb2060/curl-android/actions/artifacts/${{ steps.curl_artifact.outputs.artifact_id }}/zip

      - name: Unzip curl.zip
        run: unzip curl.zip -d curl

      - name: Find curl .aar and extract version
        id: curl_aar
        run: |
          AAR=$(find curl -type f -name "*lto*.aar" | head -n 1)
          BASENAME=$(basename "$AAR")
          VERSION=$(echo $BASENAME | sed -n 's/curl-\(.*\)-lto.aar/\1/p')
          echo "aar_path=$AAR" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # --- Download BoringSSL_Android artifact ---
      - name: Get latest boringssl run ID
        id: ssl_run
        run: |
          echo "run_id=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \
            https://api.github.com/repos/vvb2060/BoringSSL_Android/actions/runs \
            | jq '.workflow_runs[] | select(.conclusion==\"success\") | .id' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Get boringssl artifact ID
        id: ssl_artifact
        run: |
          echo "artifact_id=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \
            https://api.github.com/repos/vvb2060/BoringSSL_Android/actions/runs/${{ steps.ssl_run.outputs.run_id }}/artifacts \
            | jq '.artifacts[] | select(.name==\"library\") | .id')" >> $GITHUB_OUTPUT

      - name: Download boringssl artifact
        run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -o ssl.zip \
            https://api.github.com/repos/vvb2060/BoringSSL_Android/actions/artifacts/${{ steps.ssl_artifact.outputs.artifact_id }}/zip

      - name: Unzip ssl.zip
        run: unzip ssl.zip -d ssl

      - name: Find boringssl .aar
        id: ssl_aar
        run: |
          AAR=$(find ssl -type f -name "*lto*.aar" | head -n 1)
          echo "aar_path=$AAR" >> $GITHUB_OUTPUT

      # --- Extract all .aar files ---
      - name: Extract AARs
        run: |
          mkdir merged
          unzip "${{ steps.curl_aar.outputs.aar_path }}" -d merged
          unzip "${{ steps.ssl_aar.outputs.aar_path }}" -d merged

      # --- Generate CMakeLists.txt ---
      - name: Generate CMakeLists.txt
        run: |
          cat > merged/CMakeLists.txt <<EOF
cmake_minimum_required(VERSION 3.27)

project(curl_android)

add_library(curl_android INTERFACE)
add_library(curl::curl_static ALIAS curl_android)

function(add_imported_library lib_name lib_path)
    add_library(\${lib_name} STATIC IMPORTED)
    set_target_properties(\${lib_name} PROPERTIES IMPORTED_LOCATION \${lib_path})
endfunction()

set(LIBS curl nghttp2 nghttp3 ngtcp2 ngtcp2_crypto crypto ssl)

foreach (lib \${LIBS})
    file(GLOB LIB_PATH "\${CMAKE_CURRENT_SOURCE_DIR}/modules/\${lib}_static/libs/android.*/*.a")
    if(LIB_PATH)
        add_imported_library(\${lib} \${LIB_PATH})
        target_include_directories(curl_android INTERFACE \${CMAKE_CURRENT_SOURCE_DIR}/modules/\${lib}_static/include)
    endif()
endforeach ()

target_link_libraries(curl_android INTERFACE
        curl
        nghttp2
        nghttp3
        ngtcp2
        ngtcp2_crypto
        crypto
        ssl
        z)
EOF

      # --- Upload final artifact ---
      - name: Upload combined output
        uses: actions/upload-artifact@v4
        with:
          name: combined-aar-output
          path: merged

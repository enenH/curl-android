- name: Download latest curl-android artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "寻找 vvb2060/curl-android 的最新成功运行..."
          DEFAULT_BRANCH=$(gh repo view vvb2060/curl-android --json defaultBranchRef --jq .defaultBranchRef.name)
          echo "默认分支: $DEFAULT_BRANCH"
          LATEST_RUN_ID=$(gh run list --repo vvb2060/curl-android --branch "$DEFAULT_BRANCH" --status success --limit 1 --json databaseId --jq '.[0].databaseId')
          if [ -z "$LATEST_RUN_ID" ] || [ "$LATEST_RUN_ID" == "null" ]; then
            echo "::error::找不到 vvb2060/curl-android 在分支 '$DEFAULT_BRANCH' 上的成功运行！"
            exit 1
          fi
          echo "最新成功运行 ID: $LATEST_RUN_ID"

          echo "列出运行 $LATEST_RUN_ID 的 artifacts..."
          # 尝试列出该运行的所有 artifact 信息，包括名称和大小
          gh run view $LATEST_RUN_ID --repo vvb2060/curl-android --json artifacts || echo "::warning::无法列出 artifacts 的详细信息"
          ARTIFACT_NAMES=$(gh run view $LATEST_RUN_ID --repo vvb2060/curl-android --json artifacts --jq '.artifacts.[].name')
          echo "可用的 Artifact 名称: $ARTIFACT_NAMES"

          # 检查 'library' 是否在列出的 artifact 名称中
          # 使用 grep 进行更可靠的检查，-q 表示静默模式，找到即返回 0
          echo "$ARTIFACT_NAMES" | grep -qxF "library"
          if [ $? -ne 0 ]; then
             # 如果精确匹配 "library" 不存在，打印警告并尝试继续（也许 gh download 能处理？）
             # 或者直接报错退出：
             echo "::error::在运行 $LATEST_RUN_ID 中未精确找到名为 'library' 的 artifact。可用的名称有: $ARTIFACT_NAMES"
             exit 1
          fi
          echo "确认找到名为 'library' 的 artifact。"

          mkdir -p curl_download
          echo "从运行 $LATEST_RUN_ID 下载名为 'library' 的 artifact..."
          # 执行下载命令
          gh run download --repo vvb2060/curl-android "$LATEST_RUN_ID" --name "library" --dir curl_download
          # 检查下载命令的退出码
          DOWNLOAD_EXIT_CODE=$?

          # 如果下载命令失败
          if [ $DOWNLOAD_EXIT_CODE -ne 0 ]; then
             echo "::error::'gh run download' 命令失败，退出码: $DOWNLOAD_EXIT_CODE"
             echo "请检查 GitHub Token 权限或网络连接。"
             # 列出目录内容以供调试
             echo "curl_download 目录当前内容:"
             ls -l curl_download
             exit 1
          fi

          # 如果下载命令成功
          echo "'gh run download' 命令成功完成。检查下载的文件..."
          # 优先检查是否下载为 library.zip
          if [ -f curl_download/library.zip ]; then
            echo "Artifact 'library' 已成功下载为 curl_download/library.zip"
            # 后续步骤将使用此文件
          # 检查是否下载为 library (无扩展名)
          elif [ -f curl_download/library ]; then
             echo "::warning:: Artifact 'library' 下载为 curl_download/library (无扩展名)。将尝试重命名为 .zip"
             mv curl_download/library curl_download/library.zip
             if [ $? -ne 0 ]; then
                echo "::error::重命名 curl_download/library 失败！"
                exit 1
             fi
             echo "已成功重命名为 library.zip"
          # 检查是否下载为一个包含 'modules' 的目录 (表示 artifact 是目录)
          elif [ -d curl_download/modules ]; then
             echo "::warning:: Artifact 'library' 似乎是一个目录 artifact，内容已直接下载到 curl_download/"
             echo "::error::当前脚本的后续步骤期望一个 zip 文件进行解压，而不是一个目录。请调整脚本以处理目录 artifact 或检查源 artifact。"
             echo "curl_download 目录内容:"
             ls -lR curl_download # 递归列出目录内容
             exit 1
          # 如果以上都不是，则表示下载成功但内容未知
          else
            echo "::error::下载 curl-android 的 artifact 'library' 命令成功，但在 curl_download/ 目录中未找到预期的文件 (library.zip 或 library) 或目录结构 (modules)。"
            echo "curl_download 目录内容:"
            ls -lR curl_download # 递归列出目录内容
            exit 1
          fi
          echo "curl-android 下载和验证完成。"
